<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>肘子的Swift记事本</title><description>徐杨的个人博客,Core Data,Swift,Swift UI,Combine,健康笔记,iOS APP,Health Note,HealthNotes</description><link>https://www.fatbobman.com</link><language>zh</language><lastBuildDate>Mon, 21 Mar 2022 07:53:06 +0800</lastBuildDate><pubDate>Mon, 21 Mar 2022 07:53:06 +0800</pubDate><ttl>250</ttl><atom:link href="https://www.fatbobman.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftUIOverlayContainer2</guid><title>SwiftUI Overlay Container 2 —— 可定制、高效、便捷的视图管理器</title><description>SwiftUI Overlay Container 是一个用于 SwiftUI 的视图容器组件。一个可定制、高效、便捷的视图管理器。仅需简单配置，SwiftUI Overlay Container 即可帮你完成从视图组织、队列处理、转场、动画、交互到显示样式配置等基础工作，让开发者可以将精力更多地投入到应用程序视图的实现本身。</description><link>https://www.fatbobman.com/posts/swiftUIOverlayContainer2</link><pubDate>Sun, 20 Mar 2022 17:20:00 +0800</pubDate><content:encoded><![CDATA[<p><a href="https://github.com/fatbobman/SwiftUIOverlayContainer" target="_blank">SwiftUI Overlay Container</a> 是一个用于 SwiftUI 的视图容器组件。一个可定制、高效、便捷的视图管理器。</p><p>仅需简单配置，SwiftUI Overlay Container 即可帮你完成从视图组织、队列处理、转场、动画、交互到显示样式配置等基础工作，让开发者可以将精力更多地投入到应用程序视图的实现本身。</p><h2>历史</h2><p>2020 年夏天，在为 <a href="https://www.fatbobman.com/healthnotes/">健康笔记</a> 添加侧向滑动菜单的过程中，我发现在开发中经常会碰到需要在一个视图的上方动态添加另一视图的场景，例如（提示信息、广告、浮动按钮、新手指南等等）。因此，我写了一个组件希望可以帮助开发者在 SwiftUI 中快速完成上述需求。但受限于当时的技术能力，很多的想法都没有能够很好地实现。</p><p>近期我重写了该组件，除了实现了以前尚未支持的功能外，更重要的是，以此检验一下自己这段时间的能力是否有所提高。</p><p>大家可以从 <a href="https://github.com/fatbobman/SwiftUIOverlayContainer" target="_blank">这里</a> 获取最新的版本。</p><blockquote><p>本文的内容直接搬运自项目的 README 文档。</p></blockquote><h2>设计动机</h2><p>当我们需要在视图的上层显示新的内容（例如：弹出信息、侧边菜单<a href=https://www.fatbobman.com/posts/swiftUIOverlayContainer2>...></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/swiftUIOverlayContainer2>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/blogPostponedUpdate</guid><title>博客暂时停更通知</title><description>我的博客【肘子的Swift记事本】已经上线 2 年了。撰写博客的初衷是想通过文字来记录自己的学习的过程、加深理解并将所得分享给其他的朋友。越是撰写新的内容，越能够发现自己的不足。作为一个编程爱好者，我深知自己的基础知识相当薄弱，又该进行系统性充电了。同去年上半年停更的原因一样，我打算用一段完整的时间来充实自己，并将自己近来的学习所得通过实践的形式得以消化。</description><link>https://www.fatbobman.com/posts/blogPostponedUpdate</link><pubDate>Mon, 24 Jan 2022 09:30:00 +0800</pubDate><content:encoded><![CDATA[<p>我的博客【肘子的Swift记事本】已经上线 2 年了。撰写博客的初衷是想通过文字来记录自己的学习的过程、加深理解并将所得分享给其他的朋友。</p><p>从去年下半年开始，博文发表频率逐渐形成了每周至少一篇的局面，文章内容也逐渐脱离了个人学习笔记的形式。</p><p>越是撰写新的内容，越能够发现自己的不足。作为一个编程爱好者，我深知自己的基础知识相当薄弱，又该进行系统性充电了。</p><p>同去年上半年停更的原因一样，我打算用一段完整的时间来充实自己，并将自己近来的学习所得通过实践的形式得以消化。</p><p>本次停更估计会持续 2——3 个月的时间，中间如果确有值得分享的内容我也可能会临时发表。</p><p>停更期间我仍然会通过博客评论、邮件、Twitter 等方式同大家进行沟通。</p><br><br><h3><a href=https://www.fatbobman.com/posts/blogPostponedUpdate>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/countInCoreData</guid><title>在 Core Data 中查询和使用 count 的若干方法</title><description>在 Core Data 中，开发者经常需要面对查询记录数量（count），使用 count 作为谓词或排序条件等需求。本文将介绍在 Core Data 下查询和使用 count 的多种方法，适用于不同的场景。</description><link>https://www.fatbobman.com/posts/countInCoreData</link><pubDate>Mon, 17 Jan 2022 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>在 Core Data 中，开发者经常需要面对查询记录数量（count），使用 count 作为谓词或排序条件等需求。本文将介绍在 Core Data 下查询和使用 count 的多种方法，适用于不同的场景。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[in<a href=https://www.fatbobman.com/posts/countInCoreData>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/countInCoreData>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftuiGesture</guid><title>在 SwiftUI 下定制手势</title><description>不同于众多的内置控件，SwiftUI 没有采用对 UIGestureRecognizer（或 NSGestureRecognizer）进行包装的形式，而是重构了自己的手势体系。SwiftUI 手势在某种程度上降低了使用门槛，但由于缺乏提供底层数据的 API，严重制约了开发者的深度定制能力。在 SwiftUI 下，我们无法拥有类似构建全新 UIGestureRecongnizer 的能力。所谓的自定义手势，其实只是对系统预置手势的重构而已。本文将通过几个示例，演示如何使用 SwiftUI 提供的原生手段定制所需手势。</description><link>https://www.fatbobman.com/posts/swiftuiGesture</link><pubDate>Mon, 10 Jan 2022 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>不同于众多的内置控件，SwiftUI 没有采用对 UIGestureRecognizer（或 NSGestureRecognizer）进行包装的形式，而是重构了自己的手势体系。SwiftUI 手势在某种程度上降低了使用门槛，但由于缺乏提供底层数据的 API，严重制约了开发者的深度定制能力。在 SwiftUI 下，我们无法拥有类似构建全新 UIGestureRecongnizer 的能力。所谓的自定义手势，其实只是对系统预置手势的重构而已。本文将通过几个示例，演示如何使用 SwiftUI 提供的原生手段定制所需手势。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/',<a href=https://www.fatbobman.com/posts/swiftuiGesture>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftuiGesture>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/xcodePlayground2</guid><title>玩转 Xcode Playground（下）</title><description>本文将对 Xcode Playground 做更进一步的研究，着重于辅助代码、资源管理、使用 Playground 探索软件包和 Xcode 项目等更有深度内容。</description><link>https://www.fatbobman.com/posts/xcodePlayground2</link><pubDate>Fri, 31 Dec 2021 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>在 <a href="https://fatbobman.com/posts/xcodePlayground1/">上文</a> 中，我们介绍了有关 Xcode Playground 在创建、配置、Quick Look、实时视图等方面的知识。本文将对 Xcode Playground 做更进一步的研究，着重于辅助代码、资源管理、使用 Playground 探索软件包和 Xcode 项目等更有深度内容。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.lengt<a href=https://www.fatbobman.com/posts/xcodePlayground2>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/xcodePlayground2>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/xcodePlayground1</guid><title>玩转 Xcode Playground（上）</title><description>本系列将介绍大量有关 Xcode Playground 的使用技巧，涉及稳定性、第三方库、资源管理、异步处理、文档标注等等方面，让你玩转 Playground，使其成为你工作学习中的利器。</description><link>https://www.fatbobman.com/posts/xcodePlayground1</link><pubDate>Mon, 27 Dec 2021 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>在 Swift 语言推出的同一年（2014 年），苹果就在 Xcode 中集成了 Playground 功能。相较标准的 Xcode 项目，Playground 启动更快、使用更轻巧，被广泛应用于 Swift 语言学习、框架 API 测试、快捷数据处理、汇集灵感等众多方面。本系列将介绍大量有关 Xcode Playground 的使用技巧，涉及稳定性、第三方库、资源管理、异步处理、文档标注等等方面，让你玩转 Playground，使其成为你工作学习中的利器。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http:/<a href=https://www.fatbobman.com/posts/xcodePlayground1>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/xcodePlayground1>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftPlaygrounds4</guid><title>Swift Playgrounds 4 娱乐还是生产力</title><description>赶在 2021 年底，苹果终于发布了 Swift Playgrounds 4，作为近年来最具革命性意义的版本，Swift Playgrounds 4 提供了在 iPad 上开发可发行 app 的能力。本文将对 Swift Playground 4 的新功能做以介绍，并探讨将其作为开发工具的可行性。</description><link>https://www.fatbobman.com/posts/swiftPlaygrounds4</link><pubDate>Mon, 20 Dec 2021 08:10:00 +0800</pubDate><content:encoded><![CDATA[<p>赶在 2021 年底，苹果终于发布了 Swift Playgrounds 4，作为近年来最具革命性意义的版本，Swift Playgrounds 4 提供了在 iPad 上开发可发行 app 的能力。本文将对 Swift Playgrounds 4 的新功能做以介绍，并探讨将其作为开发工具的可行性。</p><blockquote><p>本文中的 Swift Playgrounds 4 特指 iPad 版本。MacOS 下的 Swift Playgrounds 4 目前仍采用 3.x 引擎。</p></blockquote><h2>关于 Swift Playgrounds</h2><p>在 Swift 语言发布的两年后，苹果于 WWDC 2016 上推出了 iPad 版本的 Swift Playgrounds。</p><p>Swift Playgrounds 提倡以一种有趣的方式学习严肃的代码，它不要求用户具备编程知识，非常适合初学者。采用互动式的教学模式，苹果提供了一系列的课件，以满足 4-15 岁人群的需求。</p><blockquote><p>上图中的课件内容，核心逻辑同几十年前的 Logo 语言十分类似，非常适合低幼人群。</p></blockquote><p>或许<a href=https://www.fatbobman.com/posts/swiftPlaygrounds4>...></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/swiftPlaygrounds4>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/nsubiquitousKeyvalueStore</guid><title>在 SwiftUI 下使用 NSUbiquitousKeyValueStore 同步数据</title><description>NSUbiquitousKeyValueStore 是苹果官方提供的用于在设备间共享键值数据的解决方案。本文将对其用法做以简单介绍，着重探讨如何便捷地在 SwiftUI 中使用 NSUbiquitousKeyValueStore。</description><link>https://www.fatbobman.com/posts/nsubiquitousKeyvalueStore</link><pubDate>Mon, 13 Dec 2021 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>NSUbiquitousKeyValueStore 是苹果官方提供的用于在设备间共享键值数据的解决方案。本文将对其用法做以简单介绍，着重探讨如何便捷地在 SwiftUI 中使用 NSUbiquitousKeyValueStore。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html<a href=https://www.fatbobman.com/posts/nsubiquitousKeyvalueStore>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/nsubiquitousKeyvalueStore>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/combineAndAsync</guid><title>聊聊 Combine 和 async/await 之间的合作</title><description>本文来聊聊 Combine 和 async/await 它们之间各自的优势、是否可以合作以及如何合作等问题。在 Xcode 13.2 中，苹果完成了 async/await 的向前部署（Back-deploying）工作，将最低的系统要求降低到了 iOS 13（macOS Catalina），这一举动鼓舞了越来越多的人开始尝试使用 async/await 进行开发。当大家在接触了异步序列（AsyncSequence）后，会发现它同 Combine 的表现有些接近，尤其结合近两年 Combine 框架几乎没有什么变化，不少人都提出了疑问：苹果是否打算使用 AsyncSequence 和 AsyncStream 替代 Combine。</description><link>https://www.fatbobman.com/posts/combineAndAsync</link><pubDate>Mon, 6 Dec 2021 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>在 Xcode 13.2 中，苹果完成了 async/await 的向前部署（Back-deploying）工作，将最低的系统要求降低到了 iOS 13（macOS Catalina），这一举动鼓舞了越来越多的人开始尝试使用 async/await 进行开发。当大家在接触了异步序列（AsyncSequence）后，会发现它同 Combine 的表现有些接近，尤其结合近两年 Combine 框架几乎没有什么变化，不少人都提出了疑问：苹果是否打算使用 AsyncSequence 和 AsyncStream 替代 Combine。</p><p>恰巧我在最近的开发中碰到了一个可能需要结合 Combine 和 async/await 的使用场景，通过本文来聊聊 Combine 和 async/await 它们之间各自的优势、是否可以合作以及如何合作等问题。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banne<a href=https://www.fatbobman.com/posts/combineAndAsync>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/combineAndAsync>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftUILifeCycle</guid><title>SwiftUI 视图的生命周期研究</title><description>本文将作者对 SwiftUI 视图、SwiftUI 视图生命周期的理解和研究做以介绍，供大家一起探讨。在 UIKit（AppKit）的世界中，通过框架提供的大量钩子（例如 viewDidLoad、viewWillLayoutSubviews 等），开发者可以将自己的意志注入视图控制器生命周期的各个节点之中，宛如神明。在 SwiftUI 中，系统收回了上述的权利，开发者基本丧失了对视图生命周期的掌控。不少 SwiftUI 开发者都碰到过视图生命周期的行为超出预期的状况（例如视图多次构造、onAppear 无从控制等）。</description><link>https://www.fatbobman.com/posts/swiftUILifeCycle</link><pubDate>Sun, 28 Nov 2021 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>在 UIKit（AppKit）的世界中，通过框架提供的大量钩子（例如 viewDidLoad、viewWillLayoutSubviews 等），开发者可以将自己的意志注入视图控制器生命周期的各个节点之中，宛如神明。在 SwiftUI 中，系统收回了上述的权利，开发者基本丧失了对视图生命周期的掌控。不少 SwiftUI 开发者都碰到过视图生命周期的行为超出预期的状况（例如视图多次构造、onAppear 无从控制等）。</p><p>本文将作者对 SwiftUI 视图、SwiftUI 视图生命周期的理解和研究做以介绍，供大家一起探讨。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/'<a href=https://www.fatbobman.com/posts/swiftUILifeCycle>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftUILifeCycle>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/safeArea</guid><title>掌握 SwiftUI 的 Safe Area</title><description>Safe Area（安全区域）是指不与导航栏、标签栏、工具栏或其他视图控制器提供的视图重叠的内容空间。本文将探讨如何在 SwiftUI 中获取 SafeAreaInsets、将视图绘制到安全区域之外、修改视图的安全区域等内容。</description><link>https://www.fatbobman.com/posts/safeArea</link><pubDate>Mon, 22 Nov 2021 08:12:00 +0800</pubDate><content:encoded><![CDATA[<p>Safe Area（安全区域）是指不与导航栏、标签栏、工具栏或其他视图控制器提供的视图重叠的内容空间。</p><p>在 UIKit 中，开发者需要利用 safeAreaInsets 或 safeAreaLayoutGuide ，才能确保将视图放置在界面中的可见部分。</p><p>SwiftUI 对上述过程进行了彻底的简化。除非开发者明确要求视图突破安全区域的限制，否则 SwfitUI 将尽力确保开发者创建的视图都被布局到安全区域当中。SwiftUI 同时提供了一些方法和工具让开发者对安全区域有所控制。</p><p>本文将探讨如何在 SwiftUI 中获取 SafeAreaInsets、将视图绘制到安全区域之外、修改视图的安全区域等内容。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = <a href=https://www.fatbobman.com/posts/safeArea>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/safeArea>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/mocloner</guid><title>如何在 Core Data 中对 NSManagedObject 进行深拷贝</title><description>本文将介绍关于在 Core Data 中对 NSManagedObject 进行深拷贝的技术难点、开发思路，以及我的解决方案——MOCloner。</description><link>https://www.fatbobman.com/posts/mocloner</link><pubDate>Mon, 15 Nov 2021 08:10:00 +0800</pubDate><content:encoded><![CDATA[<p>对 NSMangedObject 进行深拷贝的含义是<strong>为一个 NSManagedObject（托管对象）创建一个可控的副本，副本中包含该托管对象所有关系层级中涉及的所有数据</strong>。</p><p>尽管 Core Data 是一个功能强大的对象图管理框架，但本身并没有直接提供托管对象的复制方法。如果开发者想创建某个托管对象的副本，唯一可行的途径就是编写一段特定的代码，将原始对象中属性的内容逐个读出并赋值给新对象。此种方式在托管对象结构简单时比较有效，一旦托管对象结构复杂、关系繁多，代码量将显著增大，且极易出错。</p><p>多年来开发者一直在寻找一种便捷且通用的工具来解决深拷贝的问题，不过直到现在并没有一个被广泛认可的方案。</p><p>我在开发 <a href="https://www.fatbobman.com/healthnotes/">健康笔记</a> 新版本时也碰到了这个问题，需要深拷贝一个结构复杂、关系链牵涉大量数据的托管对象。考虑到以后可能还会遇到类似的情况，我决定编写一段使用简单、适用性广的代码方便自己使用。</p><p>本文中将探讨在 Core Data 中对 NSManagedObject 进行深拷贝的技术难点、解决思路，并介绍我写的工具<a href=https://www.fatbobman.com/posts/mocloner>...></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/mocloner>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/docScaner</guid><title>用苹果官方 API 实现 iOS 备忘录的扫描文稿功能</title><description>本文将介绍如何通过 VisionKit、Vision、NaturalLanguage、CoreSpotlight 等系统框架实现与备忘录扫描文稿类似的功能。</description><link>https://www.fatbobman.com/posts/docScaner</link><pubDate>Wed, 10 Nov 2021 08:20:00 +0800</pubDate><content:encoded><![CDATA[<p>iOS 系统自带的备忘录（Notes）在其质朴名称下提供了众多强大的功能，扫描文稿是我使用较多的功能之一。很早前便想在【<a href="https://www.fatbobman.com/healthnotes/">健康笔记</a>】之中提供类似的功能，但考虑到其涉及的知识点较多，迟迟没有下手。最近在空闲时，将近年 WWDC 中涉及该功能实现的专题梳理、学习了一遍，受益匪浅。苹果官方早已为我们准备了所需的一切工具。本文将介绍如何通过 VisionKit、Vision、NaturalLanguage、CoreSpotlight 等系统框架实现与备忘录扫描文稿类似的功能。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['ht<a href=https://www.fatbobman.com/posts/docScaner>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/docScaner>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/concurrencyOfCoreData</guid><title>关于 Core Data 并发编程的几点提示</title><description>Swift 5.5 提供了盼望已久的 async/await 的功能，为多线程开发带来了前所未有的便利。但 Core Data 由于其特有的并发规则，使用不慎容易导致代码陷入不可控状态，因此让不少开发者对在 Core Data 中进行多线程开发产生了望而却步的情绪。本文将对 Core Data 并发编程中几个常见的问题予以提示，以便开发者更好地了解 Core Data 的并发规则，充分享受 Core Data 提供的强大功能。</description><link>https://www.fatbobman.com/posts/concurrencyOfCoreData</link><pubDate>Fri, 5 Nov 2021 08:20:00 +0800</pubDate><content:encoded><![CDATA[<p>Swift 5.5 提供了盼望已久的 async/await 的功能，为多线程开发带来了前所未有的便利。但 Core Data 由于其特有的并发规则，使用不慎容易导致代码陷入不可控状态，因此让不少开发者对在 Core Data 中进行多线程开发产生了望而却步的情绪。本文将对 Core Data 并发编程中几个常见的问题予以提示，以便开发者更好地了解 Core Data 的并发规则，充分享受 Core Data 提供的强大功能。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.c<a href=https://www.fatbobman.com/posts/concurrencyOfCoreData>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/concurrencyOfCoreData>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/masteringOfCoreDataStack</guid><title>掌握 Core Data Stack</title><description>或许觉得比较枯燥，亦或许感觉 Xcode 提供的模版已经满足了使用的需要，很多 Core Data 的使用者并不愿意在 Core Data Stack 的了解和掌握上花费太多的精力。这不仅限制了他们充分使用 Core Data 提供的丰富功能，同时也让开发者在面对异常错误时无所适从。本文将对 Core Data Stack 的功能、组成、配置等做以说明，并结合个人的使用经验聊一下如何设计一个符合当下需求的 Core Data Stack。本文并不会展示一个完整的创建代码，更多是原理、思路和经验的阐述。</description><link>https://www.fatbobman.com/posts/masteringOfCoreDataStack</link><pubDate>Tue, 2 Nov 2021 08:10:00 +0800</pubDate><content:encoded><![CDATA[<p>或许觉得比较枯燥，亦或许感觉 Xcode 提供的模版已经满足了使用的需要，很多 Core Data 的使用者并不愿意在 Core Data Stack 的了解和掌握上花费太多的精力。这不仅限制了他们充分使用 Core Data 提供的丰富功能，同时也让开发者在面对异常错误时无所适从。本文将对 Core Data Stack 的功能、组成、配置等做以说明，并结合个人的使用经验聊一下如何设计一个符合当下需求的 Core Data Stack。本文并不会展示一个完整的创建代码，更多是原理、思路和经验的阐述。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
  <a href=https://www.fatbobman.com/posts/masteringOfCoreDataStack>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/masteringOfCoreDataStack>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/onChange</guid><title>了解 SwiftUI 的 onChange</title><description>从 iOS 14 开始，SwiftUI 为视图提供了 onChange 修饰器，通过使用 onChange，我们可以在视图中对特定的值进行观察，并在其更改时触发操作。本文将对 onChange 的特点、用法、注意事项以及替代方案做以介绍。</description><link>https://www.fatbobman.com/posts/onChange</link><pubDate>Fri, 29 Oct 2021 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>从 iOS 14 开始，SwiftUI 为视图提供了 onChange 修饰器，通过使用 onChange，我们可以在视图中对特定的值进行观察，并在其更改时触发操作。本文将对 onChange 的特点、用法、注意事项以及替代方案做以介绍。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").<a href=https://www.fatbobman.com/posts/onChange>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/onChange>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/derivedAndTransient</guid><title>如何在 Core Data 中使用 Derived 和 Transient 属性</title><description>使用过 Core Data 的开发者，一定会在编辑 Data Model 时看到过右侧的属性面板中的 Derived 和 Transient 两个属性。关于这两个属性的文档不多，大多的开发者并不清楚该如何使用或在何时使用该属性。文本将结合我的使用体验，对 Derived 和 Transient 两个属性的功能、用法、注意事项等内容作以介绍。</description><link>https://www.fatbobman.com/posts/derivedAndTransient</link><pubDate>Tue, 26 Oct 2021 07:30:00 +0800</pubDate><content:encoded><![CDATA[<h2>前言</h2><p>使用过 Core Data 的开发者，一定会在编辑 Data Model 时看到过右侧的属性面板中的 Derived 和 Transient 两个属性。关于这两个属性的文档不多，大多的开发者并不清楚该如何使用或在何时使用该属性。文本将结合我的使用体验，对 Derived 和 Transient 两个属性的功能、用法、注意事项等内容作以介绍。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floo<a href=https://www.fatbobman.com/posts/derivedAndTransient>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/derivedAndTransient>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/textfield-event-focus-keyboard</guid><title>SwiftUI TextField 进阶 —— 事件、焦点、键盘</title><description>本文将探讨涉及 SwiftUI TextField 的事件、焦点切换、键盘设置等相关的经验、技巧和注意事项。</description><link>https://www.fatbobman.com/posts/textfield-event-focus-keyboard</link><pubDate>Thu, 21 Oct 2021 09:00:00 +0800</pubDate><content:encoded><![CDATA[<p>本文将探讨涉及 SwiftUI TextField 的事件、焦点切换、键盘设置等相关的经验、技巧和注意事项。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
   $("#responser").on("click",function()<a href=https://www.fatbobman.com/posts/textfield-event-focus-keyboard>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/textfield-event-focus-keyboard>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthnotes2year</guid><title>聊聊两年来我使用【健康笔记】的体会以及近几年的身体状况</title><description>2019年中，我有了开发用于记录自己健康数据app的想法，并在同年10月完成了【健康笔记】第一个很简陋的版本。到今天，我已经使用健康笔记两年了。从记录的数据来看，手术后这几年身体的各项指标还算保持的不错，尽管并没有达到非常理想的状态，但同我个人之前的指标比较，已经改善太多，希望能够长期保持下去。</description><link>https://www.fatbobman.com/posts/healthnotes2year</link><pubDate>Mon, 18 Oct 2021 09:30:00 +0800</pubDate><content:encoded><![CDATA[<p>2019年中，我有了开发用于记录自己健康数据app的想法，并在同年10月完成了【健康笔记】第一个很简陋的版本。到今天，我已经使用<a href="https://www.fatbobman.com/healthnotes/">健康笔记</a>两年了。</p><p>从记录的数据来看，手术后这几年身体的各项指标还算保持的不错，尽管并没有达到非常理想的状态，但同我个人之前的指标比较，已经改善太多，希望能够长期保持下去。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners<a href=https://www.fatbobman.com/posts/healthnotes2year>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/healthnotes2year>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/textfield-1</guid><title>SwiftUI TextField 进阶——格式与校验</title><description>SwiftUI 的 TextField 可能是开发者在应用程序中最常使用的文本录入组件了。作为 UITextField（NSTextField）的 SwiftUI 封装，苹果为开发者提供了众多的构造方法和修饰符以提高其使用的便利性、定制性。但 SwiftUI 在封装中也屏蔽了不少的高级接口和功能，增加了开发者实现某些特定需要的复杂性。本文为【SwiftUI 进阶】系列文章中的一篇，在本文中，我将介绍如何在 TextField 中实现如下功能：屏蔽无效字符、判断录入的内容是否满足特定条件、对录入的文本实时格式化显示。</description><link>https://www.fatbobman.com/posts/textfield-1</link><pubDate>Tue, 12 Oct 2021 13:30:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI 的 TextField 可能是开发者在应用程序中最常使用的文本录入组件了。作为 UITextField（NSTextField）的 SwiftUI 封装，苹果为开发者提供了众多的构造方法和修饰符以提高其使用的便利性、定制性。但 SwiftUI 在封装中也屏蔽了不少的高级接口和功能，增加了开发者实现某些特定需要的复杂性。本文为【SwiftUI 进阶】系列文章中的一篇，在本文中，我将介绍如何在 TextField 中实现如下功能：</p><ul><li>屏蔽无效字符</li><li>判断录入的内容是否满足特定条件</li><li>对录入的文本实时格式化显示</li></ul><blockquote><p>本文的目的并非提供一个通用的解决方案，而是通过探讨几种思路，让读者可以在面对类似需求时有迹可循。</p></blockquote><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[1<a href=https://www.fatbobman.com/posts/textfield-1>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/textfield-1>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/attributedString</guid><title>AttributedString——不仅仅让文字更漂亮</title><description>在 WWDC 2021 上，苹果为开发者带来了有一个期待已久的功能——AttributedString，这意味着 Swift 开发人员不再需要使用基于 Objective-C 的 NSAttributedString 来创建样式化文本。本文将对其做全面的介绍并演示如何创建自定义属性。</description><link>https://www.fatbobman.com/posts/attributedString</link><pubDate>Fri, 8 Oct 2021 08:20:00 +0800</pubDate><content:encoded><![CDATA[<p>在 WWDC 2021 上，苹果为开发者带来了有一个期待已久的功能——AttributedString，这意味着 Swift 开发人员不再需要使用基于 Objective-C 的 NSAttributedString 来创建样式化文本。本文将对其做全面的介绍并演示如何创建自定义属性。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.lengt<a href=https://www.fatbobman.com/posts/attributedString>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/attributedString>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/newFormatter</guid><title>WWDC 2021 新 Formatter API：新老比较及如何自定义</title><description>本文将通过介绍如何创建符合新 API 的 Formatter，让读者从另一个角度了解新 Formatter API 的设计机制；并对新旧两款 API 进行比较。</description><link>https://www.fatbobman.com/posts/newFormatter</link><pubDate>Fri, 1 Oct 2021 10:00:00 +0800</pubDate><content:encoded><![CDATA[<p>在 WWDC 2021 的 <a href="https://developer.apple.com/videos/play/wwdc2021/10109/" target="_blank">What's in Foundation</a> 专题中，苹果隆重介绍了适用于 Swift 的新 Formatter API。网上已经有不少文章对新 API 的用法进行了说明。本文将通过介绍如何创建符合新 API 的 Formatter，让读者从另一个角度了解新 Formatter API 的设计机制；并对新旧两款 API 进行比较。</p><blockquote><p>本文的演示代码可以在 <a href="https://github.com/fatbobman/CustomParseableFormatStyleDemo" target="_blank">Github</a> 上下载</p></blockquote><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/'<a href=https://www.fatbobman.com/posts/newFormatter>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/newFormatter>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/localizationApp-1</guid><title>如何对 iOS 应用中的文本进行本地化</title><description>当我们使用一个英文 app 时，很多人第一时间会去查看是否有对应的中文版本。可见，在 app 中显示让使用者最亲切的语言文本是何等的重要。对于相当数量的 app 来说，如果能够将 UI 中显示的文本进行了本地化转换，基本上就完成了 app 的本地化工作。本文中，我们将探讨 iOS 开发中，如何实现显示文本的本地化工作。</description><link>https://www.fatbobman.com/posts/localizationApp-1</link><pubDate>Sun, 26 Sep 2021 16:40:00 +0800</pubDate><content:encoded><![CDATA[<p>当我们使用一个英文 app 时，很多人第一时间会去查看是否有对应的中文版本。可见，在 app 中显示让使用者最亲切的语言文本是何等的重要。对于相当数量的 app 来说，如果能够将 UI 中显示的文本进行了本地化转换，基本上就完成了 app 的本地化工作。本文中，我们将探讨 iOS 开发中，如何实现显示文本的本地化工作。本文的 <a href="https://github.com/fatbobman/LocalizationDemoForBlogPost" target="_blank">Demo</a> 采用 SwiftUI 编写。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index =<a href=https://www.fatbobman.com/posts/localizationApp-1>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/localizationApp-1>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/spotlight</guid><title>在 Spotlight 中展示应用中的 Core Data 数据</title><description>本文将讲解如何通过 NSCoreDataSpotlightDelegate（WWDC 2021 版本）实现将应用程序中的 Core Data 数据添加到 Spotlight 索引，方便用户查找并提高 App 的曝光率。</description><link>https://www.fatbobman.com/posts/spotlight</link><pubDate>Wed, 22 Sep 2021 15:00:00 +0800</pubDate><content:encoded><![CDATA[<p>本文将讲解如何通过 NSCoreDataSpotlightDelegate（WWDC 2021 版本）实现将应用程序中的 Core Data 数据添加到 Spotlight 索引，方便用户查找并提高 App 的曝光率。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banne<a href=https://www.fatbobman.com/posts/spotlight>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/spotlight>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/sheetKit</guid><title>SheetKit——SwiftUI 模态视图扩展库</title><description>SheetKit 是一个 SwiftUI 模态视图的扩展库。提供了数个用于模态视图的便捷展示、取消方法，以及几个用于模态视图的 View Extension</description><link>https://www.fatbobman.com/posts/sheetKit</link><pubDate>Thu, 16 Sep 2021 19:50:00 +0800</pubDate><content:encoded><![CDATA[<h2>SheetKit 是什么</h2><p><a href="https://github.com/fatbobman/SheetKit" target="_blank">SheetKit</a> 是一个 SwiftUI 模态视图的扩展库。提供了数个用于模态视图的便捷展示、取消方法，以及几个用于模态视图的 View Extension。</p><p>开发 SheetKit 的主要原因：</p><ul><li>便于 Deep link 的调用</li></ul><p>SwiftUI 提供了<code>onOpenURL</code>方法让应用程序可以非常轻松的响应 Deep Link。但在实际使用中，情况并不如预期。主要因为 SwiftUI 中重要的视图展示模式：NavigationView、Sheet 等都没有迅捷、简便的重置能力。很难通过一两句代码将应用程序立即设置成我们想要的视图状态。</p><ul><li>模态视图的集中管理</li></ul><p>SwiftUI 通常采用<code>.sheet</code>来创建模态视图，对于简单的应用来说，这种形式非常直观，但如果应用程序的逻辑比较复杂、需要的模态视图众多，则上述方式就会让代码显得十分混乱，不易整理。因此，在此种情况下，通常我们会将所有的模态视图集中管理起来，统一调用。请参阅我之前的文章——<a href="https://www.fatbobman.com/posts/swiftui-multiSheet/">在 SwiftUI 中，根据需求弹出不同的 Shee<a href=https://www.fatbobman.com/posts/sheetKit>...></a></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/sheetKit>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/newInteractiveDismissDiabled</guid><title>如何在 SwiftUI 中实现 interactiveDismissDisabled</title><description>本文中我们将探讨如何实现一个 SwiftUI 3.0 中新增功能——interactiveDismissDisabled 的增强版；如何创建更 SwiftUI 化的功能扩展。</description><link>https://www.fatbobman.com/posts/newInteractiveDismissDiabled</link><pubDate>Wed, 15 Sep 2021 14:30:00 +0800</pubDate><content:encoded><![CDATA[<p>本文中我们将探讨如何实现一个 SwiftUI 3.0 中新增功能——interactiveDismissDisabled 的增强版；如何创建更 SwiftUI 化的功能扩展。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
   $("#<a href=https://www.fatbobman.com/posts/newInteractiveDismissDiabled>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/newInteractiveDismissDiabled>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coreDataWithCloudKit-6</guid><title>Core Data with CloudKit （六） —— 创建与多个 iCloud 用户共享数据的应用</title><description>本文中，我们将探讨如何使用 Core Data with CloudKit 创建使用 NSPersistentCloudKitContainer 与多个 iCloud 用户共享数据的应用。</description><link>https://www.fatbobman.com/posts/coreDataWithCloudKit-6</link><pubDate>Sat, 11 Sep 2021 19:20:00 +0800</pubDate><content:encoded><![CDATA[<p>本文中，我们将探讨如何使用 Core Data with CloudKit 创建与多个 iCloud 用户共享数据的应用。</p><blockquote><p>本篇是本系列的最后一篇，本文中将涉及大量之前提到的知识，阅读本文前，最好已经阅读过之前的 <a href="https://www.fatbobman.com/tags/cloudkit/">文章</a>。</p></blockquote><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit （一） —— 基础</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-2/">Core Data with CloudKit（二） —— 同步本地数据库到 iCloud 私有数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-3/">Core Data with CloudKit（三）—— CloudKit 仪表台</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-4/">Core Data with CloudKit（四）—— 调试、测试、迁移及其他</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-5/">Core Data with CloudKit（五）—— 同步公共数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-6/">Core Data with CloudKit （六） —— 创建与多个 iCloud 用户共享数据的应用</a></p><p>相信应该有不少的朋友都使用过 iOS 自带的共享相簿或者共享备忘录功能。这些功能的实现都是基于几年前苹果推出的 CloudKit 共享数据 API。在 WWDC 2021 中<a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-6>...></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-6>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/async-await-store</guid><title>用 Async-Await 重建 SwiftUI 的 Redux-like 状态容器</title><description>本文介绍了如何使用 Swift 5.5 版本的 Async/Await 功能重构 SwiftUI 的状态容器代码。</description><link>https://www.fatbobman.com/posts/async-await-store</link><pubDate>Mon, 6 Sep 2021 11:05:00 +0800</pubDate><content:encoded><![CDATA[<p>经过两年多的时间，SwiftUI 发展到当前的 3.0 版本，无论 SwiftUI 的功能还是 Swift 语言本身在这段时间里都有了巨大的提升。是时候使用 Async/Await 来重构我的的状态容器代码了。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[i<a href=https://www.fatbobman.com/posts/async-await-store>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/async-await-store>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/NavigationViewKit</guid><title>用 NavigationViewKit 增强 SwiftUI 的导航视图</title><description>由于 SwiftUI 原生提供的导航手段能力有限，因此在之前的版本中，NavigationView 总是使用的不是那么的顺手。本文介绍一个我写的针对 NavigationView 的扩展库——NavigationViewKit。为原生 NavigationView 解决几个当前的痛点问题。</description><link>https://www.fatbobman.com/posts/NavigationViewKit</link><pubDate>Mon, 30 Aug 2021 20:10:00 +0800</pubDate><content:encoded><![CDATA[<p>最近一直在为我的 iOS 健康管理 app<a href="https://www.fatbobman.com/healthnotes/">健康笔记 3.0</a> 做前期的准备工作。</p><p>由于 SwiftUI 原生提供的导航手段能力有限，因此在之前的版本中，NavigationView 总是使用的不是那么的顺手。有以下几个我不满意的地方：</p><ul><li>缺少直接返回根视图的便捷手段</li><li>无法通过代码（不通过<code>NavigationLink</code>）跳转到新视图</li><li>双栏模式（<code>DoubleColumnNavigationViewStyle</code>）下显示风格不统一</li><li>在 iPad 下，无法在竖屏（Portrait）模式下保持双栏状态</li></ul><p>因此，在这次开发的准备阶段，我写了一个针对 NavigationView 的扩展库——<a href="https://github.com/fatbobman/NavigationViewKit" target="_blank">NavigationViewKit</a>。该扩展遵循以下几个原则：</p><ul><li>非破坏性</li></ul><p>任何新添加的功能都不能影响当前 SwiftUI 提供的原生功能，尤其是不能影响例如<code>Toolbar</code>、<code>NavigationLink</code>在 NavigationView 中的表现</p><ul><li>尽可能便于使用</li></ul><p>仅需极少的代码便可使用新增功能</p><ul><li>SwiftUI 原生风格</li></ul><p>扩展功能的调用方法尽可能同原生 S<a href=https://www.fatbobman.com/posts/NavigationViewKit>...></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/NavigationViewKit>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coreDataInPreview</guid><title>如何在 Xcode 下预览含有 Core Data 元素的 SwiftUI 视图</title><description>本文将探讨导致 SwiftUI 预览崩溃的部分原因，如何在之后的开发中避免类似的崩溃出现以及如何在 Xcode 中安全可靠地预览含有 Core Data 元素的 SwiftUI 视图</description><link>https://www.fatbobman.com/posts/coreDataInPreview</link><pubDate>Sat, 28 Aug 2021 08:20:00 +0800</pubDate><content:encoded><![CDATA[<p>从 SwiftUI 诞生之日起，预览（Canvas Preview ）一直是个让开发者又爱又恨的功能。当预览正常工作时，它可以极大地提高开发效率；而预览又随时可能因为各种莫名其妙的原因崩溃，不仅影响开发进程，同时又让开发者感到沮丧（很难排查出导致预览崩溃的故障）。</p><p>在预览含有 Core Data 元素的视图时崩溃的出现次数会愈发频繁，在某种程度上可能已经影响了开发者在 SwiftUI 中使用 Core Data 的热情。</p><p>结合两年来我在 SwiftUI 中使用 Core Data 的经验和教训，我们将在本文中探讨：</p><ul><li>导致 SwiftUI 预览崩溃的部分原因</li><li>如何在之后的开发中避免类似的崩溃出现</li><li>如何在 Xcode 中安全可靠地预览含有 Core Data 元素的 SwiftUI 视图</li></ul><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman<a href=https://www.fatbobman.com/posts/coreDataInPreview>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/coreDataInPreview>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/uikitInSwiftUI</guid><title>在 SwiftUI 中使用 UIKit 视图</title><description>本文将通过对 UITextField 的包装来讲解如何在 SwiftUI 中使用 UIKit 视图、如何让你的 UIKit 包装视图具有 SwiftUI 风格、在 SwiftUI 使用 UIKit 视图需要注意的地方</description><link>https://www.fatbobman.com/posts/uikitInSwiftUI</link><pubDate>Mon, 23 Aug 2021 11:12:00 +0800</pubDate><content:encoded><![CDATA[<p>已迈入第三个年头的 SwiftUI 相较诞生初始已经提供了更多的原生功能，但仍有大量的事情是无法直接通过原生 SwiftUI 代码来完成的。在相当长的时间中开发者仍需在 SwiftUI 中依赖 UIKit（AppKit）代码。好在，SwiftUI 为开发者提供了便捷的方式将 UIKit（AppKit）视图（或控制器）包装成 SwiftUI 视图。</p><p>本文将通过对 UITextField 的包装来讲解以下几点：</p><ul><li>如何在 SwiftUI 中使用 UIKit 视图</li><li>如何让你的 UIKit 包装视图具有 SwiftUI 风格</li><li>在 SwiftUI 使用 UIKit 视图需要注意的地方</li></ul><blockquote><p><strong>如果你已经对如何使用<code>UIViewRepresentable</code>有所掌握，可以直接从<code>SwiftUI 风格化</code>部分阅读</strong></p></blockquote><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.c<a href=https://www.fatbobman.com/posts/uikitInSwiftUI>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/uikitInSwiftUI>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/blogUpgrade</guid><title>博客更新记</title><description>上个周末，我将博客进行了一番装修升级。我对本次更新的效果比较满意，并非博客变得多好，而是通过此次更新，让我对当今的 Web 技术有了一定的了解。同时在本次更新过程中，无论是调试 Swift 代码、CSS 代码还是 Markdown 文档，都是在 Visual Studio Code 中进行的，这也让我对 Visual Studio Code 有了进一步的认识和掌握。</description><link>https://www.fatbobman.com/posts/blogUpgrade</link><pubDate>Tue, 17 Aug 2021 18:30:00 +0800</pubDate><content:encoded><![CDATA[<p>上个周末，我将本博客进行了一番装修升级。我对本次更新的效果比较满意，并非博客变得多好，而是通过此次更新，让我对当今的 Web 技术有了一定的了解。同时在本次更新过程中，无论是调试 Swift 代码、CSS 代码还是 Markdown 文档，都是在 Visual Studio Code 中进行的，这也让我对 Visual Studio Code 有了进一步的认识和掌握。</p><p>通过本文将这几天更新过程记录下来。</p><blockquote><p>作为一个使用 CSS、javascript 仅几天的人来说，本文的内容可能并不正确或相当偏颇，望见谅。</p></blockquote><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
  <a href=https://www.fatbobman.com/posts/blogUpgrade>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/blogUpgrade>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coreDataWithCloudKit-5</guid><title>Core Data with CloudKit（五）—— 同步公共数据库</title><description>本文将介绍如何通过 Core Data with CloudKit 将公共数据库同步到本地，在本地创建 Core Data 数据库镜像。</description><link>https://www.fatbobman.com/posts/coreDataWithCloudKit-5</link><pubDate>Fri, 13 Aug 2021 19:22:00 +0800</pubDate><content:encoded><![CDATA[<p>本文将介绍如何通过<code>Core Data with CloudKit</code>将公共数据库同步到本地，在本地创建<code>Core Data</code>数据库镜像。</p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit （一） —— 基础</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-2/">Core Data with CloudKit（二） —— 同步本地数据库到 iCloud 私有数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-3/">Core Data with CloudKit（三）—— CloudKit 仪表台</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-4/">Core Data with CloudKit（四）—— 调试、测试、迁移及其他</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-5/">Core Data with CloudKit（五）—— 同步公共数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-6/">Core Data with CloudKit （六） —— 创建与多个 iCloud 用户共享数据的应用</a></p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];<a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-5>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-5>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coreDataWithCloudKit-4</guid><title>Core Data with CloudKit（四）—— 调试、测试、迁移及其他</title><description>本文聊一下在开发 Core Data with CloudKit 项目中常见的一些问题，让大家少走弯路、避免踩坑。</description><link>https://www.fatbobman.com/posts/coreDataWithCloudKit-4</link><pubDate>Wed, 11 Aug 2021 07:50:00 +0800</pubDate><content:encoded><![CDATA[<p>本文聊一下在开发<code>Core Data with CloudKit</code>项目中常见的一些问题，让大家少走弯路、避免踩坑。</p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit （一） —— 基础</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-2/">Core Data with CloudKit（二） —— 同步本地数据库到 iCloud 私有数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-3/">Core Data with CloudKit（三）—— CloudKit 仪表台</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-4/">Core Data with CloudKit（四）—— 调试、测试、迁移及其他</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-5/">Core Data with CloudKit（五）—— 同步公共数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-6/">Core Data with CloudKit （六） —— 创建与多个 iCloud 用户共享数据的应用</a></p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banne<a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-4>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-4>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coreDataWithCloudKit-3</guid><title>Core Data with CloudKit（三）—— CloudKit 仪表台</title><description>本篇文章中，我们将一起研究 CloudKit 仪表台。</description><link>https://www.fatbobman.com/posts/coreDataWithCloudKit-3</link><pubDate>Mon, 9 Aug 2021 17:30:00 +0800</pubDate><content:encoded><![CDATA[<p>本篇文章中，我们将一起研究<code>CloudKit</code>仪表台。</p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit （一） —— 基础</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-2/">Core Data with CloudKit（二） —— 同步本地数据库到 iCloud 私有数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-3/">Core Data with CloudKit（三）—— CloudKit 仪表台</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-4/">Core Data with CloudKit（四）—— 调试、测试、迁移及其他</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-5/">Core Data with CloudKit（五）—— 同步公共数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-6/">Core Data with CloudKit （六） —— 创建与多个 iCloud 用户共享数据的应用</a></p><h2>初识仪表台</h2><p>使用<code>CloudKit Dashboard</code>需要开发者拥有 <a href="https://developer.apple.com/programs/" target="_blank">Apple Developer Program</a> 账号，访问 <a href="https://icloud.developer.apple.com" target="_blank">https://icloud.developer.apple.com</a> 即可使用。</p><p>最近两年苹果对<code>CloudKit 仪表台</code>的布局做过较大的调整，上面的截图是 2021 年中时的样子。</p><p>仪表台主要分为三个部分：</p><ul><li>数据库（<code>Clo<a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-3>...></a></code></li></ul><br><br><h3><a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-3>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coreDataWithCloudKit-2</guid><title>Core Data with CloudKit（二） —— 同步本地数据库到 iCloud 私有数据库</title><description>本篇文章中，我们将探讨 Core Data with CloudKit 应用中最常见的场景——将本地数据库同步到 iCloud 私有数据库。</description><link>https://www.fatbobman.com/posts/coreDataWithCloudKit-2</link><pubDate>Mon, 9 Aug 2021 08:50:00 +0800</pubDate><content:encoded><![CDATA[<p>本篇文章中，我们将探讨<code>Core Data with CloudKit</code>应用中最常见的场景——将本地数据库同步到<code>iCloud</code>私有数据库。我们将从几个层面逐步展开：</p><ul><li>在新项目中直接支持<code>Core Data with CloudKit</code></li><li>创建可同步<code>Model</code>的注意事项</li><li>在现有项目<code>Core Date</code>中添加<code>Host in CloudKit</code>支持</li><li>有选择的同步数据</li></ul><blockquote><p>本文使用的开发环境为<code>Xcode 12.5</code>。关于私有数据库的概念，请参阅 <a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit （一） —— 基础</a>。如想实际操作本文内容，需要拥有 <a href="https://developer.apple.com/programs/" target="_blank">Apple Developer Program</a> 账号。</p></blockquote><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit （一） —— 基础</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-2/">Core Data with CloudKit（二） —— 同步本地数据库到 iCloud 私有数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-3/">Core Data with CloudKit（三）—— CloudKit 仪表台</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-4/">Core Data with CloudKit（四）—— 调试、测试、迁移及其他</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-5/">Cor<a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-2>...></a></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-2>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coreDataWithCloudKit-1</guid><title>Core Data with CloudKit （一） —— 基础</title><description>介绍如何使用 NSPersistentContainer 的文章并不少，但同其他 Core Data 的功能一样，用好并不容易。在两年多的使用中，我便碰到不少问题。借着今年打算在【健康笔记 3】中实现共享数据库功能的机会，我最近较系统地重新学习了 Core Data with CloudKit 并对其知识点进行了梳理。希望通过这个系列博文能让更多的开发者了解并使用 Core Data with Cloudkit 功能。</description><link>https://www.fatbobman.com/posts/coreDataWithCloudKit-1</link><pubDate>Thu, 5 Aug 2021 20:50:00 +0800</pubDate><content:encoded><![CDATA[<p>在 WWDC 2019 上，苹果为<code>Core Data</code>带了一项重大的更新——引入了<code>NSPersistentCloudKitContainer</code>。这意味着无需编写大量代码，使用<code>Core Data with CloudKit</code>可以让用户在他所有的苹果设备上无缝访问应用程序中的数据。</p><p><code>Core Data</code>为开发具有结构化数据的应用程序提供了强大的对象图管理功能。CloudKit 允许用户在登录其 iCloud 账户的每台设备上访问他们的数据，同时提供一个始终可用的备份服务。<code>Core Data with CloudKit</code>则结合了本地持久化+云备份和网络分发的优点。</p><p>2020 年、2021 年，苹果持续对<code>Core Data with CloudKit</code>进行了强化，在最初仅支持私有数据库同步的基础上，添加了公有数据库同步以及共享数据库同步的功能。</p><p>我将通过几篇博文介绍<code>Core Data with CloudKit</code>的用法、调试技巧、控制台设置并尝试更深入地研究其同步机制。</p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit<a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-1>...></a></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/coreDataWithCloudKit-1>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/appstorage</guid><title>@AppStorage 研究</title><description>本文探讨的是如何优雅、高效、安全地在 SwiftUI 中使用@AppStorage，在不借助第三方库的情况下，解决当前@AppStorage 使用中出现的痛点</description><link>https://www.fatbobman.com/posts/appstorage</link><pubDate>Sat, 31 Jul 2021 18:40:00 +0800</pubDate><content:encoded><![CDATA[<h2>前言</h2><p>在苹果生态的应用中，开发者或多或少都会使用到 UserDefaults。我个人习惯将可被用户自定义的配置信息（精度、单位、色彩等）保存在 UserDefaults 中。随着配置信息的增加，在 SwiftUI 视图中使用的@AppStorage 越来越多。</p><p>在 <a href="https://www.fatbobman.com/healthnotes/">【健康笔记 3】</a> 中，我计划开放更多的自定义选项给用户，简单的算下来要有 40-50 项，在配置视图中更会将所有用到的 UserDefaults 内容都注入进代码。</p><p>本文探讨的是如何优雅、高效、安全地在 SwiftUI 中使用@AppStorage，在不借助第三方库的情况下，解决当前@AppStorage 使用中出现的痛点：</p><ul><li>支持的数据类型少</li><li>声明繁琐</li><li>声明容易出现拼写错误</li><li>大量@AppStorage 无法统一注入</li></ul><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/h<a href=https://www.fatbobman.com/posts/appstorage>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/appstorage>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/persistentHistoryTracking</guid><title>在 CoreData 中使用持久化历史跟踪</title><description>本文介绍了 CoreData 的 Persistent History Tracking 功能。详细讲解了从响应、提取、合并到清除的全过程处理方式，并提供了演示代码供读者使用。</description><link>https://www.fatbobman.com/posts/persistentHistoryTracking</link><pubDate>Tue, 27 Jul 2021 12:00:00 +0800</pubDate><content:encoded><![CDATA[<h2>前言</h2><blockquote><p><strong>2022年2月更新</strong>：我已经重写了代码，并将其整理成库 <a href="https://github.com/fatbobman/PersistentHistoryTrackingKit" target="_blank">PersistentHistoryTrackingKit</a> 以方便大家使用。</p></blockquote><p>知道持久化历史跟踪功能已经有一段时间了，之前简单地浏览过文档但没有太当回事。一方面关于它的资料不多，学习起来并不容易；另一方面也没有使用它的特别动力。</p><p>在计划中的 <a href="https://www.fatbobman.com/healthnotes/">【健康笔记 3】</a> 中，我考虑为 App 添加 Widget 或者其他的 Extentsion，另外我也打算将 WWDC21 上介绍的 NSCoreDataCoreSpotlightDelegate 用到 App 的新版本中。为此就不得不认真地了解该如何使用持久化历史跟踪功能了。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fa<a href=https://www.fatbobman.com/posts/persistentHistoryTracking>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/persistentHistoryTracking>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/wwdc2021</guid><title>WWDC 2021 观后感</title><description>WWDC 2021 转眼间已经结束一周了。本次 WWDC 苹果一如既往的带来了新的操作系统以及一大堆开发工具、软件架构、网络服务等方面的升级。由于疫情的原因，这两年的 WWDC 都是采用录播形式，不过从视频内容上看，反倒比以前传达地更加精准，对观看者也更加地友善。本文仅从我个人感兴趣的几个角度进行一点介绍，并结合这段时间的学习谈谈使用感受。</description><link>https://www.fatbobman.com/posts/wwdc2021</link><pubDate>Fri, 18 Jun 2021 20:00:00 +0800</pubDate><content:encoded><![CDATA[<p>WWDC 2021 转眼间已经结束一周了。本次 WWDC 苹果一如既往的带来了新的操作系统以及一大堆开发工具、软件架构、网络服务等方面的升级。由于疫情的原因，这两年的 WWDC 都是采用录播形式，不过从视频内容上看，反倒比以前传达地更加精准，对观看者也更加地友善。本文仅从我个人感兴趣的几个角度进行一点介绍，并结合这段时间的学习谈谈使用感受。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(<a href=https://www.fatbobman.com/posts/wwdc2021>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/wwdc2021>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swift-in-linux</guid><title>在 Linux 系统上搭建 Swift 开发调试环境</title><description>本文的目标是在 Linux 上搭建一个可供生产标准的 Swift 开发调试环境。使用者将获得一个支持代码高亮、自动补全、定义跳转、断点调试、代码美化、代码静态扫描、跨操作系统平台配置的综合开发体验。</description><link>https://www.fatbobman.com/posts/swift-in-linux</link><pubDate>Mon, 15 Feb 2021 15:00:00 +0800</pubDate><content:encoded><![CDATA[<h2>Swift 与 Linux</h2><p>自 2015 年 Swift 宣布开源并支持 Linux 后，一晃已超过 5 年。在最初几年间尽管 Swift 发展迅速，但并未被 Linux 社区广泛接受。造成这种局面的原因较多，其中既有语言稳定性方面的问题，同时又有对 Linux 的支持不完善、缺乏具有吸引力的基础库和第三方库、热点项目不足等多方面原因。</p><p>最近两年，上述问题均得到显著改善。</p><ul><li>从 Swift5 开始 Swift 团队宣布 ABI 稳定了。自此，Swift 为应用程序提供了二进制兼容性，有了 ABI 稳定性作为基础，Swift 对其他平台的支持速度和力度将大大提高</li><li>2020 年 Swift 团队推出了 5.3 版本，除了“重要的质量提升和性能增强”之外，Swift5.3 的一个关键特性是正式支持 Linux 和 Window 平台。事实上，这也是 Swift 的发布流程首次为三个不同的平台分别设立了发布负责人。作为承诺将 Swift 引入 Linux 的第一份成果，Swift 团队宣布新的 Swift<a href=https://www.fatbobman.com/posts/swift-in-linux>...></a></li></ul><br><br><h3><a href=https://www.fatbobman.com/posts/swift-in-linux>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/publish-3</guid><title>用 Publish 创建博客（三）——插件开发</title><description>我们不仅可以利用 Publish 内置的接口来开发插件进行扩展，同时还可以使用 Publish 套件中其他的优秀库（Ink、Plot、Sweep、Files、ShellOut 等）来完成更多的创意。本文将通过几个实例（添加标签、增加属性、用代码生成内容、全文搜索、命令行部署）在展示不同扩展手段的同时向大家介绍 Publish 套件中其他的优秀成员。</description><link>https://www.fatbobman.com/posts/publish-3</link><pubDate>Wed, 3 Feb 2021 19:58:00 +0800</pubDate><content:encoded><![CDATA[<p>我们不仅可以利用 Publish 内置的接口来开发插件进行扩展，同时还可以使用 Publish 套件中其他的优秀库（Ink、Plot、Sweep、Files、ShellOut 等）来完成更多的创意。本文将通过几个实例（添加标签、增加属性、用代码生成内容、全文搜索、命令行部署）在展示不同扩展手段的同时向大家介绍 Publish 套件中其他的优秀成员。在阅读本文前，最好能先阅读 <a href="https://www.fatbobman.com/posts/publish-1/">用 Publish 创建博客（一）——入门</a>、<a href="https://www.fatbobman.com/posts/publish-2/">用 Publish 创建博客（二）——主题开发</a>。对 Publish 有个基本了解。本文篇幅较长，你可以选择自己感兴趣的实战内容阅读。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.c<a href=https://www.fatbobman.com/posts/publish-3>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/publish-3>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/publish-2</guid><title>用 Publish 创建博客（二）——主题开发</title><description>拥用强大的主题系统是一个静态网站生成器能否成功的重要原因之一。Publish 采用 Plot 作为主题的开发工具，让开发者在高效编写主题的同时享受到了 Swift 的类型安全的优势。本文将从 Plot 开始介绍，让读者最终学会如何创建 Publish 主题。</description><link>https://www.fatbobman.com/posts/publish-2</link><pubDate>Mon, 1 Feb 2021 16:20:00 +0800</pubDate><content:encoded><![CDATA[<p>拥用强大的主题系统是一个静态网站生成器能否成功的重要原因之一。<a href="https://github.com/JohnSundell/Publish" target="_blank">Publish</a> 采用 <a href="https://github.com/JohnSundell/Plot" target="_blank">Plot</a> 作为主题的开发工具，让开发者在高效编写主题的同时享受到了 Swift 的类型安全的优势。本文将从 Plot 开始介绍，让读者最终学会如何创建 Publish 主题。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#ad<a href=https://www.fatbobman.com/posts/publish-2>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/publish-2>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/publish-1</guid><title>用 Publish 创建博客（一）——入门</title><description>Publish 是一款专门为 Swift 开发者打造的静态网站生成器。它使用 Swift 构建整个网站，并支持主题、插件和其他大量的定制选项。 本文包含 Publish 的快速使用入门以及基本结构说明。</description><link>https://www.fatbobman.com/posts/publish-1</link><pubDate>Sat, 30 Jan 2021 21:00:00 +0800</pubDate><content:encoded><![CDATA[<p><a href="https://github.com/JohnSundell/Publish" target="_blank">Publish</a> 是一款专门为 Swift 开发者打造的静态网站生成器。它使用 Swift 构建整个网站，并支持主题、插件和其他大量的定制选项。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
   $("#responser").on("<a href=https://www.fatbobman.com/posts/publish-1>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/publish-1>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftui-ipad</guid><title>在 SwiftUI 下对 iPad 进行适配</title><description>SwiftUI 创建初衷之一便是可以高效、可靠的适配多个苹果的硬件平台。在健康笔记 2.0 开发初始，适配 iPad 便是我本次的设计目标之一。本文并非教程，只是我在进行本次开发中，对于适配 iPad 的一些教训和心得。</description><link>https://www.fatbobman.com/posts/swiftui-ipad</link><pubDate>Thu, 29 Oct 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI 创建初衷之一便是可以高效、可靠的适配多个苹果的硬件平台。在健康笔记 2.0 开发初始，适配 iPad 便是我本次的设计目标之一。本文并非教程，只是我在进行本次开发中，对于适配 iPad 的一些教训和心得。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(bann<a href=https://www.fatbobman.com/posts/swiftui-ipad>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftui-ipad>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/coredata-in-swiftui</guid><title>聊一下在 SwiftUI 中使用 CoreData</title><description>本文并非一个教你如何在 SwiftUI 下使用 CoreData 的教程。主要探讨的是在我近一年的 SwiftUI 开发中使用 CoreData 的教训、经验、心得。</description><link>https://www.fatbobman.com/posts/coredata-in-swiftui</link><pubDate>Wed, 28 Oct 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>本文并非一个教你如何在 SwiftUI 下使用 CoreData 的教程。主要探讨的是在我近一年的 SwiftUI 开发中使用 CoreData 的教训、经验、心得。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
   $("#resp<a href=https://www.fatbobman.com/posts/coredata-in-swiftui>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/coredata-in-swiftui>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthnote2-3rd-package</guid><title>介绍几个我在开发健康笔记 2 用到的 Swift 或 SwiftUI 第三方库</title><description>本文介绍了其中几个在健康笔记开发过程中使用的第三方的开源库</description><link>https://www.fatbobman.com/posts/healthnote2-3rd-package</link><pubDate>Tue, 27 Oct 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<h2><a href="https://github.com/SwiftUIX/SwiftUIX" target="_blank">SwiftUIX</a></h2><blockquote><p>SwiftUIX 试图弥补仍处于新生阶段的 SwiftUI 框架的空白，提供了广泛的组件，扩展和实用程序套件来补充标准库。 迄今为止，该项目是缺少的 UIKit / AppKit 功能的最完整的移植，力求使其以大多数类似于 Apple 的方式交付。 这个项目的目标是补充 SwiftUI 标准库，提供数百种扩展和视图，使开发人员可以轻松地通过 SwiftUI 的革命来构建应用程序。</p></blockquote><p>提供了非常多的苹果本应提供但没有提供的功能扩展。项目的发起者非常年轻，但 mac 的开发经验十分丰富。到目前为止一直保持的较高的更新频率和维护状态。这个库同时支持 UIKit 和 Appkit，对于需要做苹果生态全平台的用户十分友好。由于目前 SwiftUI 的 List 和 LazyVStack 的问题还很多，他自己在开发中也深受其苦，前天在交流中，他已经决定重做 CocoaList 功能，尤其提高对 Fetchrequest 的支持。</p><p>对于进行 SwiftUI 开发的朋友，它是十分值得推荐的。</p><p>目<a href=https://www.fatbobman.com/posts/healthnote2-3rd-package>...></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/healthnote2-3rd-package>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthNote2-development-memo-6</guid><title>健康笔记 2.0 开发随笔（六）</title><description>一晃国庆中秋长假即将结束，距离上次的随笔也有了一段时间。在最近的日子里，我一方面继续着开发的进程，同时还要付出相当的精力同 iOS14 中的各种 Bug 和异常斗智斗勇。本篇随笔主要记录了这段时间碰到的一些问题，以及聊聊 iOS14、Xcode12 以及 SwiftUI2.0 的一些优缺点。想到哪、写到哪，可能逻辑会比较混乱。</description><link>https://www.fatbobman.com/posts/healthNote2-development-memo-6</link><pubDate>Mon, 26 Oct 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>收尾工作往往是最枯燥的。</p><p>最近这 10 几天，主要的工作都是查找 bug，改进性能，反复测试数据的稳定性，以及更加枯燥的文档准备工作。</p><p>向 app store 提交反倒异常顺利，中间只出现了一次反复。苹果要我确认是否会滥用用户的数据，在明确回复不会之后就通过了。想想去年底健康笔记 1.0 的上线反复折腾了我 10 多天。</p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-1/">Core Data with CloudKit （一） —— 基础</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-2/">Core Data with CloudKit（二） —— 同步本地数据库到 iCloud 私有数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-3/">Core Data with CloudKit（三）—— CloudKit 仪表台</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-4/">Core Data with CloudKit（四）—— 调试、测试、迁移及其他</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-5/">Core Data with CloudKit（五）—— 同步公共数据库</a></p><p><a href="https://www.fatbobman.com/posts/coreDataWithCloudKit-6/">Core Data with CloudKit （六） —— 创建与多个 iCloud 用户共享数据的应用</a></p><script type="text/javascript">
$(document).ready(function() {
   va<a href=https://www.fatbobman.com/posts/healthNote2-development-memo-6>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/healthNote2-development-memo-6>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthnote2-release</guid><title>健康笔记 2.0 正式版完成了！</title><description>经过了大半年的积累和准备，持续了 2 个月的开发，健康笔记 2.0 在昨天上线了。</description><link>https://www.fatbobman.com/posts/healthnote2-release</link><pubDate>Mon, 26 Oct 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>经过了大半年的积累和准备，持续了 2 个月的开发，健康笔记 2.0 在昨天上线了。</p><p>本次开发，我重写了健康笔记的全部代码，最后的结果个人还是比较满意的。</p><p>苹果在 2020 年无论从 iOS,Swift,SwiftUI 还是 Xcode 几个方面改进还是显著的，对我的帮助很大。</p><p>无论从功能、性能、UI 表现上，2.0 版都比 1.0 版有了较大提高。</p><p>在这里可以下载 <a href="https://apps.apple.com/us/app/health-notes-2/id1534513553"></a></p><br><br><h3><a href=https://www.fatbobman.com/posts/healthnote2-release>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthNote2-development-memo-5</guid><title>健康笔记 2.0 开发随笔（五）</title><description>一晃国庆中秋长假即将结束，距离上次的随笔也有了一段时间。在最近的日子里，我一方面继续着开发的进程，同时还要付出相当的精力同 iOS14 中的各种 Bug 和异常斗智斗勇。本篇随笔主要记录了这段时间碰到的一些问题，以及聊聊 iOS14、Xcode12 以及 SwiftUI2.0 的一些优缺点。想到哪、写到哪，可能逻辑会比较混乱。</description><link>https://www.fatbobman.com/posts/healthNote2-development-memo-5</link><pubDate>Wed, 7 Oct 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>一晃国庆中秋长假即将结束，距离上次的随笔也有了一段时间。在最近的日子里，我一方面继续着开发的进程，同时还要付出相当的精力同 iOS14 中的各种 Bug 和异常斗智斗勇。</p><p>本篇随笔主要记录了这段时间碰到的一些问题，以及聊聊 iOS14、Xcode12 以及 SwiftUI2.0 的一些优缺点。想到哪、写到哪，可能逻辑会比较混乱。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.ra<a href=https://www.fatbobman.com/posts/healthNote2-development-memo-5>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/healthNote2-development-memo-5>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthNote2-development-memo-4</guid><title>健康笔记 2.0 开发随笔（四）</title><description>本周没有太多的精力和情绪用来写代码。这两天在原来统一 sheet 管理和实时 Form 的基础上，完成了可以控制取消手势的 Sheet。这个是 SwiftUI 中一直以来的一个重要的缺失功能。 在 SwiftUI 中制作可以控制取消手势的 Sheet</description><link>https://www.fatbobman.com/posts/healthNote2-development-memo-4</link><pubDate>Thu, 17 Sep 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>经过 2 周的治疗，我父亲终于脱离的生命危险。疫情的原因，医院只允许一个护工在身边照顾，病人长时间无法见到家属而导致了较严重的心理问题。综合考虑，周末已接回家。回家 2 天后，整个状况有了非常好的转变。在这次的治疗中，我提供给医院的我父亲这几年来的各方面身体指标数据起到了很重要的作用。</p><p>本周没有太多的精力和情绪用来写代码。这两天在原来统一 sheet 管理和实时 Form 的基础上，完成了可以控制取消手势的 Sheet。这个是 SwiftUI 中一直以来的一个重要的缺失功能。 <a href="https://www.fatbobman.com/posts/swiftui-dismiss-sheet/">在 SwiftUI 中制作可以控制取消手势的 Sheet</a></p><p>Xcode 12 beta6 的 bug 还是不少，这两天我竟然见到了 3 次四国画面。 SwiftUI 2.0 的 List 问题也很多，甚至感觉比 1.0 更不稳定，而且效率有明显的问题。目前已将所有使用 List 的地方都暂时替换成了 LazyVStack。</p><br><br><h3><a href=https://www.fatbobman.com/posts/healthNote2-development-memo-4>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftui-dismiss-sheet</guid><title>在 SwiftUI 中制作可以控制取消手势的 Sheet</title><description>在前面的两篇文章中，我们探讨了如何制作一个可以判断是否进行了修改的表单，以及如何统一管理 app 各个层级 View 的弹出 Sheet。今天我们将他们合并在一起，完成整个项目的最终目的——在 Sheet 中制作一个可以实时响应的表单，并且 sheet 会感觉表单的情况响应取消手势。</description><link>https://www.fatbobman.com/posts/swiftui-dismiss-sheet</link><pubDate>Thu, 17 Sep 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>在前面的两篇文章中，我们探讨了如何制作一个可以判断是否进行了修改的表单，以及如何统一管理 app 各个层级 View 的弹出 Sheet。今天我们将他们合并在一起，完成整个项目的最终目的——在 Sheet 中制作一个可以实时响应的表单，并且 sheet 会感觉表单的情况响应取消手势。</p></blockquote><p><a href="https://www.fatbobman.com/posts/swiftui-multiSheet/">在 SwiftUI 中，根据需求弹出不同的 Sheet</a></p><p><a href="https://www.fatbobman.com/posts/swiftui-input-form/">如何在 SwiftUI 中创建一个实时响应的 Form</a></p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'<a href=https://www.fatbobman.com/posts/swiftui-dismiss-sheet>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftui-dismiss-sheet>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthNote2-development-memo-3</guid><title>健康笔记 2.0 开发随笔（三）</title><description>本周的由于其他琐事的原因，每天能够用于开发的时间基本上只能保证 2-3 个小时，所以进展不大。不过好在我也没有明确的进度指标。</description><link>https://www.fatbobman.com/posts/healthNote2-development-memo-3</link><pubDate>Sat, 5 Sep 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>由于家属突发疾病，最近每天都要出入医院，因此最近用于开发的时间很有限。</p><p>目前 app 已经完成了笔记、条目、数据的创建、编辑、显示、删除全部逻辑。如果不考虑图表、数据导入导出、交叉比对等功能，app 的基本功能已经完成了。</p><p>在本次开发中，我着重调整了表单的开发方式，目前表单无论从响应，判断等方便都比上一版有了很大的提高。</p><p>本次我将以前分散的输入源（source of truth）统一到了一起，不仅更便于代码管理，同时也方便实现了很多以前无法或实现起来非常困难的功能。</p><p>关于表单的处理，可以参看我的文章 <a href="https://www.fatbobman.com/posts/swiftui-input-form/">如何在 SwiftUI 中创建一个实时响应的 Form</a>。</p><p>另外，由于我的 app 对于 sheet 的使用量也很多，所以也对 sheet 的响应做出了统一的管理，这方面我记录在另一篇文章中 <a href="https://www.fatbobman.com/posts/swiftui-multiSheet/">在 SwiftUI 中，根据需求弹出不同的 Sheet</a>。</p><p>时间有限，随便记录一点。</p><br><br><h3><a href=https://www.fatbobman.com/posts/healthNote2-development-memo-3>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftui-input-form</guid><title>如何在 SwiftUI 中创建一个实时响应的 Form</title><description>我的 app 健康笔记主要是对数据的收集、管理，所以对于表单的实时检查、响应的要求比较高。因此制作一个对用于输入响应及时、反馈准确的 Form 十分重要。本文尝试提出一个 SwiftUI 下的 Form 开发思路。</description><link>https://www.fatbobman.com/posts/swiftui-input-form</link><pubDate>Fri, 4 Sep 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>我的 app 健康笔记主要是对数据的收集、管理，所以对于表单的实时检查、响应的要求比较高。因此制作一个对用于输入响应及时、反馈准确的 Form 十分重要。本文尝试提出一个 SwiftUI 下的 Form 开发思路。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners<a href=https://www.fatbobman.com/posts/swiftui-input-form>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftui-input-form>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftui-multiSheet</guid><title>在 SwiftUI 中，根据需求弹出不同的 Sheet</title><description>Sheet 是一个我比较喜欢的交互形式，它可以很好的控制用户的操作行为，让用户的交互逻辑单线条化。在 iOS14 上，SwiftUI 增加了 fullCover，支持了全屏的 Sheet 方式，让开发者又了更多的选择。</description><link>https://www.fatbobman.com/posts/swiftui-multiSheet</link><pubDate>Fri, 4 Sep 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>Sheet 是一个我比较喜欢的交互形式，它可以很好的控制用户的操作行为，让用户的交互逻辑单线条化。在 iOS14 上，SwiftUI 增加了 fullCover，支持了全屏的 Sheet 方式，让开发者又了更多的选择。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banne<a href=https://www.fatbobman.com/posts/swiftui-multiSheet>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftui-multiSheet>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthNote2-development-memo-2</guid><title>健康笔记 2.0 开发随笔（二）</title><description>本周的由于其他琐事的原因，每天能够用于开发的时间基本上只能保证 2-3 个小时，所以进展不大。不过好在我也没有明确的进度指标。</description><link>https://www.fatbobman.com/posts/healthNote2-development-memo-2</link><pubDate>Mon, 24 Aug 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>本周的由于其他琐事的原因，每天能够用于开发的时间基本上只能保证 2-3 个小时，所以进展不大。不过好在我也没有明确的进度指标。</p><p>由于 2.0 在功能上同 1.0 的区别并不太大，所以在功能需求设计上不需要花费太多的时间。这半年来我自己也基本总结了一个自己用起来比较顺手的 MVVM 框架所以在最开始的 1 周，并不用太费力变完成了一个最简陋 ui 的原型版。</p><p>尽管叫原型版，但数据流、数据库操作等待基础代码都是要用于正式版中的。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/<a href=https://www.fatbobman.com/posts/healthNote2-development-memo-2>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/healthNote2-development-memo-2>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftui-list-foreach</guid><title>聊一下 SwiftUI 中的 List 和 ForEach</title><description>在 SwiftUI 中使用 List 可以非常方便快速的制作各种列表。List 其实就是对 UITableView 进行的封装。</description><link>https://www.fatbobman.com/posts/swiftui-list-foreach</link><pubDate>Mon, 24 Aug 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>在 SwiftUI 中使用 List 可以非常方便快速的制作各种列表。List 其实就是对 UITableView 进行的封装（更多 List 的具体用法请参阅 <a href="https://zhuanlan.zhihu.com/p/110749923" target="_blank">List 基本用法</a>).</p><p>在 List 中添加动态内容，我们可以使用两种方式</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").ht<a href=https://www.fatbobman.com/posts/swiftui-list-foreach>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftui-list-foreach>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/healthNote2-development-memo-1</guid><title>健康笔记 2.0 开发随笔（一）</title><description>健康笔记从 2020 年 1 月上线以来，至今已经过了大半年的时间（可以从 [老人新兵 —— 一款 iOS app 的开发手记](https://zhuanlan.zhihu.com/p/103822455) 了解健康笔记 app 的由来）。在这段时间里，我对于 Swift、SwiftUI、CoreData 等都有了进一步的了解和认识。在开发 1.0 版本时所面对的问题和疑惑多数都得到了解决。</description><link>https://www.fatbobman.com/posts/healthNote2-development-memo-1</link><pubDate>Mon, 17 Aug 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>健康笔记从 2020 年 1 月上线以来，至今已经过了大半年的时间（可以从 <a href="https://zhuanlan.zhihu.com/p/103822455" target="_blank">老人新兵 —— 一款 iOS app 的开发手记</a> 了解健康笔记 app 的由来）。在这段时间里，我对于 Swift、SwiftUI、CoreData 等都有了进一步的了解和认识。在开发 1.0 版本时所面对的问题和疑惑多数都得到了解决。</p></blockquote><p>最近随着 iOS14 发布的临近，同时也想将这短时间来学习的知识进行更系统的整理和应用，于是便将健康笔记 2.0 的开发工作提上了日程，并已经着手进行中。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http<a href=https://www.fatbobman.com/posts/healthNote2-development-memo-1>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/healthNote2-development-memo-1>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swifui-overlay</guid><title>SwiftUIOverlayContainer ——可以实现各种自定义样式弹出视图的 SwitUI 库</title><description>SwiftUI 目前可以提供 sheet,fullScreenCover,alert,actionsheet 等弹出视图用于丰富 UI 交互。不过种类还是有些单调。为了能够更方便的编写各种弹出式窗口的代码，我写了一个简单的 SwiftUI 库 —— SwiftUIOverlayContainer。</description><link>https://www.fatbobman.com/posts/swifui-overlay</link><pubDate>Wed, 12 Aug 2020 16:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>SwiftUI 目前可以提供 sheet,fullScreenCover,alert,actionsheet 等弹出视图用于丰富 UI 交互。不过种类还是有些单调。为了能够更方便的编写各种弹出式窗口的代码，我写了一个简单的 SwiftUI 库 —— SwiftUIOverlayContainer。</p></blockquote><p>SwiftUIOverlayContainer 本身并不提供任何预置的视图样式，不过通过它，你有充分的自有度来实现自己需要的视图效果。OverlayContainer 的主要目的在于帮助你完成动画、交互、样式定制等基础工作，使开发者能够将时间和精力仅需投入在视图本身的代码上。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.f<a href=https://www.fatbobman.com/posts/swifui-overlay>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swifui-overlay>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swipeCell</guid><title>用 SwiftUI 实现 iOS mail 程序的侧滑菜单</title><description>随着 SwiftUI2.0 的不断完善，我觉得是时候将我的 app 做一个较大的升级了。之前一直想在 app 中实现类似 iOS 邮件程序那样优雅的侧滑菜单效果，在网上也找了一下，实现的较好的是适用于 UIKit 的，基本上没有能够很好的适配 SwiftUI 的项目库。最终自己在 Xcode12 实现了一个。</description><link>https://www.fatbobman.com/posts/swipeCell</link><pubDate>Wed, 12 Aug 2020 14:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>随着 SwiftUI2.0 的不断完善，我觉得是时候将我的 app 做一个较大的升级了。之前一直想在 app 中实现类似 iOS 邮件程序那样优雅的侧滑菜单效果，在网上也找了一下，实现的较好的是适用于 UIKit 的，基本上没有能够很好的适配 SwiftUI 的项目库。最终自己在 Xcode12 实现了一个。</p></blockquote><p>SwipeCell 是一个用 Swift 5.3 开发的 SwiftUI 库。目标是为了实现类似 iOS Mail 程序实现的左右滑动菜单功能。SwipeCell 需要 XCode 12 ,iOS 14</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];<a href=https://www.fatbobman.com/posts/swipeCell>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swipeCell>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-import-export</guid><title>HowTo —— SwiftUI2.0 文件导入导出</title><description>SwiftUI2.0 中新增了原生的文件导入导出功能。需注意的是对于不同目录下文件的导出行为会有不同，不同平台下对于权限的处理也不同。</description><link>https://www.fatbobman.com/posts/howto-swiftui-import-export</link><pubDate>Tue, 28 Jul 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI2.0 中新增了原生的文件导入导出功能。需注意的是对于不同目录下文件的导出行为会有不同，不同平台下对于权限的处理也不同。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
   $("#responser").on("clic<a href=https://www.fatbobman.com/posts/howto-swiftui-import-export>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-import-export>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-scrollviewReader</guid><title>HowTo —— SwiftUI2.0 使用 ScrollViewReader 定位滚动位置</title><description>SwiftUI2.0 增加了滚动定位功能，已经可以较轻松的适应大多数场景的应用。实现手段完全不同于之前民间的各种解决方案，并不是通过设置具体的 offset 来进行定位，而是使用 id 来进行位置标记。</description><link>https://www.fatbobman.com/posts/howto-swiftui-scrollviewReader</link><pubDate>Thu, 23 Jul 2020 13:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI2.0 增加了滚动定位功能，已经可以较轻松的适应大多数场景的应用。实现手段完全不同于之前民间的各种解决方案，并不是通过设置具体的 offset 来进行定位，而是使用 id 来进行位置标记。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index<a href=https://www.fatbobman.com/posts/howto-swiftui-scrollviewReader>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-scrollviewReader>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-progressView</guid><title>HowTo —— SwiftUI2.0 使用 ProgressView 显示进度条</title><description>SwiftUI2.0 新增了一些便捷的内置控件，比如说 Label、ProgressView 等。其基本形态都很普通，不过都支持自定义 style。官方的意图也比较明显，通过内置控件，规范代码、提高原型编写速度，如需要更精细控制可通过扩展 style 来完成。</description><link>https://www.fatbobman.com/posts/howto-swiftui-progressView</link><pubDate>Sun, 12 Jul 2020 13:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI2.0 新增了一些便捷的内置控件，比如说 Label、ProgressView 等。其基本形态都很普通，不过都支持自定义 style。官方的意图也比较明显，通过内置控件，规范代码、提高原型编写速度，如需要更精细控制可通过扩展 style 来完成。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#a<a href=https://www.fatbobman.com/posts/howto-swiftui-progressView>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-progressView>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-onOpenUrl</guid><title>HowTo —— 使用 onOpenURL 处理 Universal Links</title><description>SwiftUI2.0 由于可以采用新的代码架构（Life Cycle SwiftUI App）来组织 app, 因此提供了 onOpenURL 来处理 Univeresal Links。不同于在 AppDelegate 或 SceneDelegate 中的解决方案，onOpenURL 作为一个 view modifier，你可以在任意 View 上注册你的 app 的 URL 处理机制。</description><link>https://www.fatbobman.com/posts/howto-swiftui-onOpenUrl</link><pubDate>Sat, 11 Jul 2020 13:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI2.0 由于可以采用新的代码架构（Life Cycle SwiftUI App）来组织 app, 因此提供了 onOpenURL 来处理 Univeresal Links。不同于在 AppDelegate 或 SceneDelegate 中的解决方案，onOpenURL 作为一个 view modifier，你可以在任意 View 上注册你的 app 的 URL 处理机制。关于如何为自己的 app 创建 URL Scheme，请参阅 <a href="https://developer.apple.com/documentation/uikit/inter-process_communication/allowing_apps_and_websites_to_link_to_your_content/defining_a_custom_url_scheme_for_your_app" target="_blank">苹果的官方文档</a>。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['htt<a href=https://www.fatbobman.com/posts/howto-swiftui-onOpenUrl>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-onOpenUrl>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-toolbar</guid><title>HowTo —— SwiftUI2.0 使用 ToolBar 替代 navigationbarItems</title><description>SwiftUI2.0 为了实现更好的多平台支持同时需要兼顾 1.0 版本代码兼容性，提供了一些与已有控件功能上类似但名称和用法全新的控件。比如 ToolBar, navigationTitle 等。Toolbar 可以实现 navigationbarItems 的全部功能，并新增了在多平台下的适配。采用了全新的语法，代码更易阅读。</description><link>https://www.fatbobman.com/posts/howto-swiftui-toolbar</link><pubDate>Fri, 10 Jul 2020 14:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI2.0 为了实现更好的多平台支持同时需要兼顾 1.0 版本代码兼容性，提供了一些与已有控件功能上类似但名称和用法全新的控件。比如 ToolBar, navigationTitle 等。Toolbar 可以实现 navigationbarItems 的全部功能，并新增了在多平台下的适配。采用了全新的语法，代码更易阅读。 &gt; &gt; <strong>在当前的 Xcode Version 12.0 beta 2 (12A6163b) 版本下，ToolBar 在 macOS 下仍然有非常多的问题。</strong></p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   ba<a href=https://www.fatbobman.com/posts/howto-swiftui-toolbar>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-toolbar>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-link-openurl</guid><title>HowTo —— SwiftUI2.0 使用 Link 或 openURL 打开 URL scheme</title><description>SwiftUI2.0 提供了原生的打开 URL scheme 的功能，我们可以十分方便的在代码中调用其他的 app。</description><link>https://www.fatbobman.com/posts/howto-swiftui-link-openurl</link><pubDate>Fri, 10 Jul 2020 13:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI2.0 提供了原生的打开 URL scheme 的功能，我们可以十分方便的在代码中调用其他的 app。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
   $("#responser").on("click",functi<a href=https://www.fatbobman.com/posts/howto-swiftui-link-openurl>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-link-openurl>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-grid</guid><title>HowTO —— SwiftUI2.0 原生的 Grid</title><description>SwiftUI 的第一版中，官方并没有提供 UICollectionView 的对应功能。开发者需要自行包装或者依赖很多第三方库。SwiftUI2.0 中，苹果通过 LazyVGrid、LazyHGrid 提供了 Grid 控件。该控件的实现很有 SwiftUI 的风格，和众多的第三方库有显著的区别。</description><link>https://www.fatbobman.com/posts/howto-swiftui-grid</link><pubDate>Fri, 10 Jul 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI 的第一版中，官方并没有提供 UICollectionView 的对应功能。开发者需要自行包装或者依赖很多第三方库。SwiftUI2.0 中，苹果通过 LazyVGrid、LazyHGrid 提供了 Grid 控件。该控件的实现很有 SwiftUI 的风格，和众多的第三方库有显著的区别。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * bann<a href=https://www.fatbobman.com/posts/howto-swiftui-grid>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-grid>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-label</guid><title>HowTo —— SwiftUI2.0 如何使用 Label</title><description>SwiftUI2.0 中新增了 Label 控件，方便我们添加由图片和文字组成的标签。</description><link>https://www.fatbobman.com/posts/howto-swiftui-label</link><pubDate>Thu, 9 Jul 2020 13:05:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>SwiftUI2.0 中新增了 Label 控件，方便我们添加由图片和文字组成的标签</p></blockquote><h2>基本用法</h2><pre data-language="swift"><code><span class="hljs-type">Label</span>(<span class="hljs-string">"Hello World"</span>,systemImage:<span class="hljs-string">"person.badge.plus"</span>)
</code></pre><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][<a href=https://www.fatbobman.com/posts/howto-swiftui-label>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-label>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-lazyStack</guid><title>HowTo —— SwiftU2.0 LazyVStack LazyHStack</title><description>SwiftUI2.0 提供了 LazyVStack 和 LazyHStack，其作用是只有当 View 在可见区域内才进行渲染，这样可以大大大提高 app 执行效率</description><link>https://www.fatbobman.com/posts/howto-swiftui-lazyStack</link><pubDate>Thu, 9 Jul 2020 13:05:00 +0800</pubDate><content:encoded><![CDATA[<p>SwiftUI2.0 提供了 LazyVStack 和 LazyHStack，其作用是只有当 View 在可见区域内才进行渲染，这样可以大大大提高 app 执行效率。由于 VStack 或 HStack 导致的效率问题，在 <a href="https://zhuanlan.zhihu.com/p/111151515" target="_blank">SwiftUI List (3) —— List、Form、VStack</a> 文章中有简单的比较。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random(<a href=https://www.fatbobman.com/posts/howto-swiftui-lazyStack>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-lazyStack>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/howto-swiftui-map</guid><title>HowTo—— Swift2.0 在视图中显示地图</title><description>Swift2.0 中，苹果添加了 Map，让开发者可以非常容易的在 View 中添加需要的地图元素。本文简单介绍了其用法</description><link>https://www.fatbobman.com/posts/howto-swiftui-map</link><pubDate>Thu, 9 Jul 2020 13:00:00 +0800</pubDate><content:encoded><![CDATA[<p>Swift2.0 中，苹果添加了 Map，让开发者可以非常容易的在 View 中添加需要的地图元素。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
   $("#responser").on("click",function(){
  <a href=https://www.fatbobman.com/posts/howto-swiftui-map>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/howto-swiftui-map>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftui2-new-feature-2</guid><title>SwiftUI2.0 —— App、Scene、新的代码结构（二）</title><description>在上篇文章中我们简单了解了 App、Scene，以及几个内置 Scene 的应用。在本文中，我们着重探讨在 SwiftUI2.0 新的代码结构下如果更高效的组织 Data Flow。</description><link>https://www.fatbobman.com/posts/swiftui2-new-feature-2</link><pubDate>Wed, 8 Jul 2020 14:00:00 +0800</pubDate><content:encoded><![CDATA[<p>在 <a href="https://www.fatbobman.com/posts/swiftui2-new-feature-1/">上篇文章</a> 中我们简单了解了 App、Scene，以及几个内置 Scene 的应用。在本文中，我们着重探讨在 SwiftUI2.0 新的代码结构下如果更高效的组织 Data Flow。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner").html(banners[index][1]);
 <a href=https://www.fatbobman.com/posts/swiftui2-new-feature-2>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftui2-new-feature-2>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftui2-new-feature-1</guid><title>SwiftUI2.0 —— App、Scene、新的代码结构（一）</title><description>本文简单介绍了 SwiftUI2.0 中全新提供的 App 协议、Scene 协议，浅谈了在全新的代码结构下如何组织 Data Flow，并提供了 SwiftUI2.0 中预置的 Scene 的一些使用示例。当前运行环境为 Xcode Version 12.0 beta (12A6159), macOS Big Sur 11.0 Beta 版 (20A4299v)。</description><link>https://www.fatbobman.com/posts/swiftui2-new-feature-1</link><pubDate>Wed, 8 Jul 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>本文简单介绍了 SwiftUI2.0 中全新提供的 App 协议、Scene 协议，浅谈了在全新的代码结构下如何组织 Data Flow，并提供了 SwiftUI2.0 中预置的 Scene 的一些使用示例。 当前运行环境为 Xcode Version 12.0 beta (12A6159), macOS Big Sur 11.0 Beta 版 (20A4299v)。</p></blockquote><p>WWDC20 中，苹果为开发者带来了基于 SwiftUI 的全新项目模板。使用该模板，将使项目代码变得异常简洁、清晰。</p><pre data-language="swift"><code>@main
<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">NewAllApp</span>: <span class="hljs-title">App</span> </span>{
    <span class="hljs-keyword">var</span> body: some <span class="hljs-type">Scene</span> {
        <span class="hljs-type">WindowGroup</span> {
            <span class="hljs-type">Text</span>(<span class="hljs-string">"Hello world"</span>)
        }
    }
}
</code></pre><p>上述代码可以在屏幕上完成 Hello world 的显示，且能够运行于 iOS 和 macOS 平台下。</p><script type="text/javascript">
$(document).ready(functi<a href=https://www.fatbobman.com/posts/swiftui2-new-feature-1>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftui2-new-feature-1>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/focusedBinding</guid><title>@FocusedBinding 浅谈</title><description>在苹果 WWDC20 中视频中出现了下面的代码，介绍了一个新的属性包装器@FocusedBinding。由于仍处于测试阶段，当前的代码并不能被正确的执行。@FocusedBinding 的资料苹果披露的也很少，网上也没有相关的信息。出于个人兴趣，我对它进行了简单的研究。尽管@FocusedBinding 在目前 Xcode Version 12.0 beta 2 (12A6163b) 的版本上运行还有很多问题，但我基本上对其有了一定的了解。</description><link>https://www.fatbobman.com/posts/focusedBinding</link><pubDate>Sun, 5 Jul 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>在苹果 WWDC20 中视频中出现了下面的代码，介绍了一个新的属性包装器@FocusedBinding。由于仍处于测试阶段，当前的代码并不能被正确的执行。@FocusedBinding 的资料苹果披露的也很少，网上也没有相关的信息。出于个人兴趣，我对它进行了简单的研究。尽管@FocusedBinding 在目前 Xcode Version 12.0 beta 2 (12A6163b) 的版本上运行还有很多问题，但我基本上对其有了一定的了解。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatb<a href=https://www.fatbobman.com/posts/focusedBinding>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/focusedBinding>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftUI2-commands</guid><title>SwiftUI2.0 —— Commands（macOS 菜单）</title><description>本文介绍了 SwiftUI 2.0 中，如何为 macOS 平台添加菜单。苹果在 SwiftUI2.0 中增加了 Multiplatform 项目模板，使得同一套代码，仅需少量的适配便可以同时满足 iOS 以及 macOS 的需要。对于 macOS 上运行的 app, 拥有自定义的菜单是一个十分重要的平台特征。对于没有 macOS 开发经验的我来说，学习如何设计开发菜单变得十分有趣且必要。</description><link>https://www.fatbobman.com/posts/swiftUI2-commands</link><pubDate>Sat, 27 Jun 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>本文介绍了 SwiftUI 2.0 中，如何为 macOS 平台添加菜单。 当前运行环境为 Xcode Version 12.0 beta (12A6159), macOS Big Sur 11.0 Beta 版 (20A4299v)。</p></blockquote><p>苹果在 SwiftUI2.0 中增加了 Multiplatform 项目模板，使得同一套代码，仅需少量的适配便可以同时满足 iOS 以及 macOS 的需要。对于 macOS 上运行的 app, 拥有自定义的菜单是一个十分重要的平台特征。对于没有 macOS 开发经验的我来说，学习如何设计开发菜单变得十分有趣且必要。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.c<a href=https://www.fatbobman.com/posts/swiftUI2-commands>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftUI2-commands>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/stateobject</guid><title>SwiftUI 2.0 —— @StateObject 研究</title><description>WWDC20 刚刚结束，在过去的一周，苹果为开发者带来了巨大的惊喜。由于新特性实在太多，需要不少时间来消化，我首先选择自己最感兴趣的内容进行一些简单的研究和探讨。本文首先浅谈一下 SwiftUI 新提供的属性包装器@StateObject。</description><link>https://www.fatbobman.com/posts/stateobject</link><pubDate>Fri, 26 Jun 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>WWDC20 刚刚结束，在过去的一周，苹果为开发者带来了巨大的惊喜。由于新特性实在太多，需要不少时间来消化，我首先选择自己最感兴趣的内容进行一些简单的研究和探讨。本文首先浅谈一下 SwiftUI 新提供的属性包装器@StateObject。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random() * banners.length);
   $("#adsBanner")<a href=https://www.fatbobman.com/posts/stateobject>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/stateobject>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/observableObject-study</guid><title>ObservableObject 研究——想说爱你不容易</title><description>本文主要研究在 SwiftUI 中，采用单一数据源 (Single Source of Truth) 的开发模式，ObservableObject 是否为最佳选择。是否可以在几乎不改变现有设计思路下进行新的尝试，以提高响应效率。最后提供了一个仍采用单一数据源设计思路但完全弃用 ObservableObject 的方式。</description><link>https://www.fatbobman.com/posts/observableObject-study</link><pubDate>Sun, 17 May 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>本文主要研究在 SwiftUI 中，采用单一数据源 (Single Source of Truth) 的开发模式，ObservableObject 是否为最佳选择。是否可以在几乎不改变现有设计思路下进行新的尝试，以提高响应效率。最后提供了一个仍采用单一数据源设计思路但完全弃用 ObservableObject 的方式。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index = 0;
   banners[0] = ['http://www.fatbobman.com/healthnotes/','<div></img></div>'];
   banners[1] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   banners[2] = ['http://www.fatbobman.com/healthnotes/','<div><img src = "https://cdn.fatbobman.com/healthnotesPromotion3.png"></img></div>'];
   index = Math.floor(Math.random<a href=https://www.fatbobman.com/posts/observableObject-study>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/observableObject-study>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/swiftUI-state</guid><title>@state 研究</title><description>本文试图探讨并分析 SwiftUI 中 @State 的实现方式和运行特征；最后提供了一个有关扩展@State 功能的思路及例程。读者需要对 SwiftUI 的响应式编程有基本概念。</description><link>https://www.fatbobman.com/posts/swiftUI-state</link><pubDate>Sun, 17 May 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>本文试图探讨并分析 SwiftUI 中 @State 的实现方式和运行特征；最后提供了一个有关扩展@State 功能的思路及例程。读者需要对 SwiftUI 的响应式编程有基本概念。</p></blockquote><h2>研究的意义何在</h2><p>我在去年底使用了 SwiftUI 写了第一个 iOS app <strong>健康笔记</strong>，这是我第一次接触响应式编程概念。在有了些基本的认识和尝试后，深深的被这种编程的思路所打动。不过，我在使用中也发现了一些奇怪的问题。就像之前在 <a href="https://zhuanlan.zhihu.com/p/103822455" target="_blank">老人新兵</a> 中说的那样，我发现在视图（View）数量达到一定程度，随着数据量的增加，整个 app 的响应有些开始迟钝，变得有粘滞感、不跟手。app 响应出现了问题一方面肯定和我的代码效率、数据结构设计欠佳有关；不过随着继续分析，发现其中也有很大部分原因来自于 SwiftUI 中所使用的响应式的实现方式。不恰当的使用，可能导致响应速度会随着数据量及 View 量的增加而大幅下降。通过一段时间的研究和分析，我打算用两篇文章来阐述这方面的问题，并尝试提供一个现阶段的使用思路。</p><script type="text/javascript">
$(docume<a href=https://www.fatbobman.com/posts/swiftUI-state>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/swiftUI-state>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/vapor4</guid><title>Vapor4 的安装与配置</title><description>本文介绍了如何在 mac 10.5.4 和 ubuntu 18.04 下安装 Vapor 命令行工具，创建 Vapor 项目，简单的调试项目以及如何部署到生产环境的过程。文中的运行环境为：Vapor4,Swift5.2,Catalina 10.5.4,Ubuntu18.04</description><link>https://www.fatbobman.com/posts/vapor4</link><pubDate>Thu, 7 May 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<blockquote><p>本文介绍了如何在 mac 10.5.4 和 ubuntu 18.04 下安装 Vapor 命令行工具，创建 Vapor 项目，简单的调试项目以及如何部署到生产环境的过程。文中的运行环境为：Vapor4,Swift5.2,Catalina 10.5.4,Ubuntu18.04</p></blockquote><p>最近新开通了一个云服务器（Linux 系统），使用 <a href="https://hexo.io/zh-cn/index.html/" target="_blank">Hexo</a> 创建了新的博客网页。考虑增加点简单的交互功能，所以需要在服务器端添加逻辑处理能力。由于近半年来基本上都是在使用 Swift，所以打算尝试一下 Server Side Swift。没有太仔细选择各种框架，看过几个介绍 Vapor 使用的视频后，感觉不错，便开始尝试安装配置。</p><p>Vapor 的官方文档实在是有很大的问题，网上的不少心得、教程又有点陈旧（目前版本调整较大）。通过两天的折腾，终于基本上理出了脉络，初步搭建了开发和生产环境。</p><script type="text/javascript">
$(document).ready(function() {
   var banners = [];
   var index =<a href=https://www.fatbobman.com/posts/vapor4>...></a></script><br><br><h3><a href=https://www.fatbobman.com/posts/vapor4>查看全文</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://www.fatbobman.com/posts/first-post</guid><title>时隔多年，重新创建了博客</title><description>用 Hexo 创建了一个博客，主要记录自己在开发健康笔记过程中的一点心得和技术总结。</description><link>https://www.fatbobman.com/posts/first-post</link><pubDate>Thu, 30 Apr 2020 12:00:00 +0800</pubDate><content:encoded><![CDATA[<p>用 Hexo 创建了一个博客，主要记录自己在开发健康笔记过程中的一点心得和技术总结。</p><br><br><h3><a href=https://www.fatbobman.com/posts/first-post>查看全文</a></h3>]]></content:encoded></item></channel></rss>